AWSTemplateFormatVersion: '2010-09-09'

Description: Provision the required resources for your blog post example 'Add domain filtering to
  your NAT instance with Squid'. Wait for the creation to complete before testing.

Parameters:

  AmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: AMI ID pointer in AWS Systems Manager Parameter Store. Default value points to the
      latest Amazon Linux 2 AMI ID.

  InstanceCount:
    Type: Number
    Default: 3
    Description: Number of gateway instances to deploy
    MinValue: 1
    MaxValue: 3


  InstanceType:
    Type: String
    Default: t3.small
    Description: Instance type to use to launch the NAT instances.
    AllowedValues:
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c4.large
    - c4.xlarge
    - c4.large
    - c5.large
    - c5.xlarge
    - c5.large

  WhitelistDomains:
    Type: CommaDelimitedList
    Default: .com,.net,.org,.edu
    Description: List of whitelisted domains separated by a comma. Enter ".example.com" to
      whitelist all the sub-domains of example.com.

  PublicSubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: Subnet IDs for the gateways

  VPC:
    Type: "AWS::EC2::VPC::Id"
    Description: The VPC ID for resource creation

  VPCCidr:
    Type: String
    Description: CIDR range of the specified VPC.  Example 10.0.0.0/16

Metadata:
  'AWS::CloudFormation::Interface':

    ParameterGroups:
    - Label:
        default: Network Configuration
      Parameters:
      - PublicSubnets
      - VPC
      - VPCCidr
    - Label:
        default: Instance Configuration
      Parameters:
      - AmiId
      - InstanceType
      - InstanceCount
    - Label:
        default: Proxy Configuration
      Parameters:
      - WhitelistDomains

    ParameterLabels:
      PublicSubnets:
        default: Gateway Subnets 
      VPC: 
        default: Gateway VPC 
      VPCCidr: 
        default: VPC CIDR Range
      AmiId:
        default: AMI ID
      InstanceType:
        default: NAT Instance Type
      InstanceCount:
        default: Number of gateways to deploy (ideally 1 per subnet)
      WhitelistDomains:
        default: Allowed Domains

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket

  S3PutLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            Resource: !Sub '${S3Bucket.Arn}*'

  S3PutLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      Timeout: 30
      Role: !GetAtt S3PutLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import boto3

          def handler(event, context):
            try:
              print(json.dumps(event))
              client = boto3.client('s3')
              content = event['ResourceProperties']['Content']
              bucket = event['ResourceProperties']['Bucket']
              key = event['ResourceProperties']['Key']
              physicalid = 's3://%s/%s' % (bucket, key)
              if event['RequestType'] == 'Delete':
                client.delete_object(Bucket=bucket, Key=key)
              else:
                client.put_object(Bucket=bucket, Key=key, Body=content.encode())
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalid)

            except Exception as e:
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
              raise(e)

  TcconfigS3Object:
    Type: Custom::S3Object
    Properties:
      ServiceToken: !GetAtt S3PutLambdaFunction.Arn
      Bucket: !Ref S3Bucket
      Key: tc/tcconfig.json
      Content: |
        {
            "eth0": {
                "outgoing": {},
                "incoming": {}
            }
        }

  WhitelistS3Object:
    Type: Custom::S3Object
    Properties:
      ServiceToken: !GetAtt S3PutLambdaFunction.Arn
      Bucket: !Ref S3Bucket
      Key: squid/whitelist.txt
      Content: !Join [ "\n", !Ref WhitelistDomains ]

  SquidConfS3Object:
    Type: Custom::S3Object
    Properties:
      ServiceToken: !GetAtt S3PutLambdaFunction.Arn
      Bucket: !Ref S3Bucket
      Key: squid/squid.conf
      Content: 
        !Sub |
          visible_hostname squid
          cache deny all

          # Log format and rotation
          logformat squid %ts.%03tu %6tr %>a %Ss/%03>Hs %<st %rm %ru %ssl::>sni %Sh/%<a %mt
          logfile_rotate 10
          debug_options rotate=10

          # Handle HTTP requests
          http_port 3128
          http_port 3129 intercept

          # Handle HTTPS requests
          https_port 3130 cert=/etc/squid/ssl/squid.pem ssl-bump intercept
          acl SSL_port port 443
          http_access allow SSL_port
          acl step1 at_step SslBump1
          acl step2 at_step SslBump2
          acl step3 at_step SslBump3
          ssl_bump peek step1 all

          # Deny requests to proxy instance metadata
          acl instance_metadata dst 169.254.169.254
          http_access deny instance_metadata

          acl local_network localip ${VPCCidr}
          http_access allow local_network

          # Filter HTTP requests based on the whitelist
          acl allowed_http_sites dstdomain "/etc/squid/whitelist.txt"
          http_access allow allowed_http_sites

          # Filter HTTPS requests based on the whitelist
          acl allowed_https_sites ssl::server_name "/etc/squid/whitelist.txt"
          ssl_bump peek step2 allowed_https_sites
          ssl_bump splice step3 allowed_https_sites
          ssl_bump terminate step2 all
          
          http_access deny all

  NATInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:ListObject
            Resource: !Sub '${S3Bucket.Arn}*'
          - Effect: Allow
            Action:
            - ec2:ModifyInstanceAttribute
            Resource: '*'

  NATInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref NATInstanceRole
      Path: /

  NATInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows HTTP and HTTPS from private instances to NAT instances
      SecurityGroupIngress:
      - CidrIp: !Ref VPCCidr
        FromPort: 80
        ToPort: 80
        IpProtocol: TCP
      - CidrIp: !Ref VPCCidr
        FromPort: 443
        ToPort: 443
        IpProtocol: TCP
      Tags:
      - Key: Name
        Value: !Sub 'NAT Instance SG - ${AWS::StackName}'
      VpcId: !Ref VPC

  NATInstanceLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
    - WhitelistS3Object
    - SquidConfS3Object
    Properties:
      IamInstanceProfile: !Ref NATInstanceProfile
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId
      SecurityGroups:
      - !Ref NATInstanceSG
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Redirect the user-data output to the console logs
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            # Apply the latest security patches
            yum update -y --security

            # Disable source / destination check. It cannot be disabled from the launch configuration
            region=${AWS::Region}
            instanceid=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
            aws ec2 modify-instance-attribute --no-source-dest-check --instance-id $instanceid --region $region

            # Install tc and tcconfig for traffic control 
            yum install -y tc 
            pip3 install tcconfig

            # Install and start Squid
            yum install -y squid
            systemctl start squid || service squid start
            iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3129
            iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 3130

            # Create a SSL certificate for the SslBump Squid module
            mkdir /etc/squid/ssl
            cd /etc/squid/ssl
            openssl genrsa -out squid.key 4096
            openssl req -new -key squid.key -out squid.csr -subj "/C=XX/ST=XX/L=squid/O=squid/CN=squid"
            openssl x509 -req -days 3650 -in squid.csr -signkey squid.key -out squid.crt
            cat squid.key squid.crt >> squid.pem

            # Refresh the traffic control configuration 
            mkdir -p /etc/tc/old
            cat > /etc/tc/tc-conf-refresh.sh << 'EOF'
            export PATH=$PATH:/usr/local/bin
            aws s3 sync s3://${S3Bucket}/tc /etc/tc 
            tcset --overwrite --import-setting /etc/tc/tcconfig.json
            EOF
            chmod +x /etc/tc/tc-conf-refresh.sh
            /etc/tc/tc-conf-refresh.sh

            # Refresh the Squid configuration files from S3
            mkdir /etc/squid/old
            cat > /etc/squid/squid-conf-refresh.sh << 'EOF'
            cp /etc/squid/* /etc/squid/old/
            aws s3 sync s3://${S3Bucket}/squid /etc/squid
            /usr/sbin/squid -k parse && /usr/sbin/squid -k reconfigure || (cp /etc/squid/old/* /etc/squid/; exit 1)
            EOF
            chmod +x /etc/squid/squid-conf-refresh.sh
            /etc/squid/squid-conf-refresh.sh

            # Schedule tasks
            cat > ~/mycron << 'EOF'
            * * * * * /etc/tc/tc-conf-refresh.sh
            * * * * * /etc/squid/squid-conf-refresh.sh
            0 0 * * * sleep $(($RANDOM % 3600)); yum -y update --security
            0 0 * * * /usr/sbin/squid -k rotate
            EOF
            crontab ~/mycron
            rm ~/mycron

            # Install and configure the CloudWatch Agent
            rpm -Uvh https://amazoncloudwatch-agent-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
            {
              "agent": {
                "metrics_collection_interval": 10,
                "omit_hostname": true
              },
              "metrics": {
                "metrics_collected": {
                  "procstat": [
                    {
                      "pid_file": "/var/run/squid.pid",
                      "measurement": [
                        "cpu_usage"
                      ]
                    }
                  ]
                },
                "append_dimensions": {
                  "AutoScalingGroupName": "${!aws:AutoScalingGroupName}"
                },
                "force_flush_interval": 5
              },
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/squid/access.log*",
                        "log_group_name": "/filtering-nat-instance/access.log",
                        "log_stream_name": "{instance_id}",
                        "timezone": "Local"
                      },
                      {
                        "file_path": "/var/log/squid/cache.log*",
                        "log_group_name": "/filtering-nat-instance/cache.log",
                        "log_stream_name": "{instance_id}",
                        "timezone": "Local"
                      }
                    ]
                  }

                }
              }
            }
            EOF
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

            # CloudFormation signal
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource NATInstanceASG --region ${AWS::Region}

  NATInstanceASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref InstanceCount
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref NATInstanceLC
      MaxSize: 3
      MinSize: 1
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-Gateway'
        PropagateAtLaunch: True
      - Key: ChaosGW
        Value: 1
        PropagateAtLaunch: True
      VPCZoneIdentifier: !Ref PublicSubnets
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M

  NATInstanceASGHook: 
    Type: AWS::AutoScaling::LifecycleHook
    Properties: 
      AutoScalingGroupName: !Ref NATInstanceASG
      DefaultResult: ABANDON
      LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
      HeartbeatTimeout: 300
